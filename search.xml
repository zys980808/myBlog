<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux-Quick-Start.md</title>
      <link href="/2020/04/19/Linux/Linux-Quick-Start-md/"/>
      <url>/2020/04/19/Linux/Linux-Quick-Start-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux快速入门"><a href="#Linux快速入门" class="headerlink" title="Linux快速入门"></a>Linux快速入门</h1><p>个人食用的Linux快速入门小手册。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.linuxcool.com/" target="_blank" rel="noopener">Linux命令大全(手册)</a></li></ul><h2 id="Shell终端"><a href="#Shell终端" class="headerlink" title="Shell终端"></a>Shell终端</h2><p>Linux系统的内核负责完成对硬件资源的分配、调度等管理任务。Shell将用户的基于计算机的命令转述给内核执行。</p><ul><li>6个预设终端，使用快捷键<code>[Ctrl] + [Alt] + [F1]~[F6]</code>切换</li><li>↑ ↓ 历史指令</li><li>Tab补全</li><li>批处理脚本</li><li>环境变量</li><li>重定向</li><li>…</li></ul><blockquote><p>关于更多的内容会在后面的Bash特性讲到，这里简单带过</p></blockquote><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li>在只记得部分命令关键字的场合，我们可通过<code>man -k</code>来搜索；</li><li>需要知道某个命令的简要说明，可以使用 <code>whatis</code>；而更详细的介绍，则可用info命令；</li><li>查看命令在哪个位置，我们需要使用<code>which</code>；</li><li>而对于命令的具体参数及使用方法，我们需要用到强大的<code>man</code>；</li></ul><blockquote><p>看用法，用<code>man</code>；更细致的说明和介绍要用<code>info</code></p></blockquote><h3 id="man"><a href="#man" class="headerlink" title="man"></a><code>man</code></h3><p>使用<code>man</code>查看手册是非常重要的学习技能，</p><ul><li><code>man # keyword</code> 可以指定对应的手册序号</li><li><code>man -f keyword</code> 浏览不同手册下的该条目信息</li><li><code>man -k keyword</code> 进行内容检索</li></ul><table><thead><tr><th>序号</th><th>代表内容</th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>使用者在shell环境中可以执行的指令或可执行程序；比如<code>ls</code></strong></td></tr><tr><td>2</td><td>系统核心可调用的函数与工具等</td></tr><tr><td>3</td><td>一些常用的函数(function)与函数库(library)，大部分为C的函数库(<code>libc</code>)；比如<code>printf</code>函数</td></tr><tr><td>4</td><td>设备的说明，通常在/dev下的档案</td></tr><tr><td><strong>5</strong></td><td><strong>配置文件的格式；比如<code>/etc/passwd</code></strong></td></tr><tr><td>6</td><td>游戏(games)</td></tr><tr><td>7</td><td>惯例与协定等，例如Linux文件系统、网络协议、ASCII code等等的说明</td></tr><tr><td><strong>8</strong></td><td><strong>系统管理员可用的管理指令</strong></td></tr><tr><td>9</td><td>跟kernel有关的文件</td></tr></tbody></table><p>比如<code>man fork</code>会显示fork(2)；在前期的学习 1, 5, 8 相对重要一些；到后面学APUE估计就经常要查 2, 3, 9 了</p><p>查阅文档时可以进行的一些操作：</p><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻一页</td><td></td></tr><tr><td>[Page Down]</td><td>向下翻一页</td><td></td></tr><tr><td>[Page Up]</td><td>向上翻一页</td><td></td></tr><tr><td>[Home]</td><td>去到第一页</td><td></td></tr><tr><td>[End]</td><td>去到最后一页</td><td></td></tr><tr><td>/string</td><td>向『下』搜寻string 这个字串</td><td></td></tr><tr><td>?string</td><td>向『上』搜寻string 这个字串</td><td></td></tr><tr><td>n, N</td><td>利用/ 或? 来搜寻字串时，可以用n 来继续下一个搜寻(不论是/ 或?) ，可以利用N 来进行『反向』搜寻</td><td></td></tr><tr><td>q</td><td>结束这次的man page</td><td></td></tr></tbody></table><h3 id="info"><a href="#info" class="headerlink" title="info"></a><code>info</code></h3><p>基本上，info与man的用途其实差不多，但info内容拆分成可跳转的节点，形成树状的结构。</p><ul><li><code>U</code> 返回上层父节点（目录）</li><li><code>N</code> 下一个节点</li><li><code>P</code> 上一个节点</li><li><code>Enter</code> 进入超链接</li><li><code>h</code> 求助</li></ul><h2 id="目录命令"><a href="#目录命令" class="headerlink" title="目录命令"></a>目录命令</h2><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p>切换目录</p><ul><li><code>cd -</code> = <code>cd ${OLDPWD}</code> 访问上一次所在目录</li></ul><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p>查看当前目录</p><ul><li>即 <code>echo ${PWD}</code></li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p>展示文件夹文件</p><ul><li><code>-R</code> 递归显示</li><li><code>-d</code> 仅查看目录自身（管道下好用）</li><li><code>-l</code> 长列表，详细信息</li><li><code>-h</code> 文件大小加单位</li></ul><h2 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h2><h3 id="which"><a href="#which" class="headerlink" title="which"></a><code>which</code></h3><p>定位指令/别名的位置</p><ul><li><code>--skip-alias</code> 可以跳过别名(??)</li></ul><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a><code>whereis</code></h3><p>定位一个命令的 bin, src, man</p><ul><li><code>-b</code> 只看binary</li><li><code>-m</code> 只看manual</li><li><code>-s</code> 只看src</li></ul><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a><code>alias</code></h3><p>查看别名列表</p><ul><li>定义别名，<code>alias NAME=VALUE</code>，只对当前shell进程有效</li><li><code>unalias</code> 撤销别名</li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a><code>history</code></h3><p>查看历史命令</p><ul><li>登出也会保存到文件中</li><li>可以通过设置环境变量定制history<ul><li><code>$HISTSIZE</code> 命令历史条数</li><li><code>$HISTFILE</code>: 持久保存命令历史的文件位置</li><li><code>$HISTFILESIZE</code>: 上述文件大小</li><li><code>$HISTCONTROL</code>: 控制命令历史的记录方式 <ul><li><code>ignoredups</code>: 忽略重复的命令</li><li><code>ignorespace</code>: 忽略空白字符开头的命令</li><li><code>ignoreboth</code>: 两者同时生效</li></ul></li></ul></li><li><code>!#</code>: 再一次执行 history 中的命令 </li><li><code>!STRING</code>: 执行最近的以<code>STRING</code>开头的命令</li><li><code>ESC + &#39;.&#39;</code> 或 <code>ALT+ &#39;.&#39;</code>: 上一条命令的最后一个参数，等同于 <code>!$</code></li></ul><h2 id="时间命令"><a href="#时间命令" class="headerlink" title="时间命令"></a>时间命令</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a><code>date</code></h3><p>显示或设置<strong>系统时钟</strong>；系统时钟是开机获取完硬件时间后由CPU自己跳的时间</p><ul><li>自定义显示格式: <code>date +&quot;%Y-%m-%d-%H-%M-%S&quot;</code>(更多的格式可以自行查帮助); </li><li><code>%j</code> 可看是一年中的第几天</li><li>设定日期时间: <code>date [MMDDhhmm[[CC]YY][.ss]]</code></li><li>另一个设置日期时间的方法: <code>date -s &quot;20170901 8:30:00&quot;</code></li></ul><h3 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a><code>hwclock</code></h3><p>显示或设定<strong>硬件时钟</strong>；硬件时钟是BIOS供电维护的时间</p><ul><li><code>-s --hctosys</code>: 硬件时间写入到系统时间</li><li><code>-w --systohc</code>: 系统时间写入到硬件时间</li></ul><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a><code>cal</code></h3><p>日历 <code>cal [[month] year]</code></p><h2 id="其他常用指令"><a href="#其他常用指令" class="headerlink" title="其他常用指令"></a>其他常用指令</h2><h3 id="file"><a href="#file" class="headerlink" title="file"></a><code>file</code></h3><p>查看文件类型</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><code>type</code></h3><p>查看命令类型，内置or外部可执行文件</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><p>输出文本文件内容</p><ul><li><code>-n</code> 加行数</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h3><p>输出指定字符串</p><ul><li><code>-e</code> 使转义符生效 (需要引号)</li><li>“” 弱引用，替换 <code>$</code> 变量; 例如<code>echo &quot;${PWD}&quot;</code></li><li>‘’ 强引用，不替换 <code>$</code> 变量</li></ul><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a><code>shutdown</code></h3><p>关机 <code>shutdown [OPTIONS…] [hh:mm/+m] [wall msg]</code></p><ul><li><code>shutdown now</code> = <code>shutdown +0</code></li><li><code>-r</code> = <code>reboot</code></li><li><code>-p</code> = <code>poweroff</code></li><li><code>-h</code> = <code>halt</code></li><li><code>-c</code> 取消</li></ul><h3 id="wall"><a href="#wall" class="headerlink" title="wall"></a><code>wall</code></h3><p>向所有用户发出信息</p><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a><code>sync</code></h3><p>将内存中暂存的信息写入硬盘，</p><ul><li>good practice: 定时和关机前<code>sync</code>一下</li></ul><h3 id="who"><a href="#who" class="headerlink" title="who"></a><code>who</code></h3><p>查看当前登录用户的信息</p><ul><li><code>-r</code> 运行级别？</li><li><code>w</code> 强化版 <code>who</code>，还显示运行状况</li></ul><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a><code>bc</code></h3><p>计算器、单位换算器(?)</p><ul><li><code>+,-,*,/,^,%</code></li><li><code>scale = #</code> 设置显示小数点，默认为0位</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>edge type</title>
      <link href="/2018/11/26/Algorithm/graph-edge-type/"/>
      <url>/2018/11/26/Algorithm/graph-edge-type/</url>
      
        <content type="html"><![CDATA[<h1 id="有向图边的类型"><a href="#有向图边的类型" class="headerlink" title="有向图边的类型"></a>有向图边的类型</h1><p>有向图边有如下几个类型：</p><ul><li>tree edge 树边</li><li>foward edge 前向边</li><li>back edge 回边</li><li>cross edge 横跨边</li></ul><p>一张图即可解释：</p><p><img src="1.png" alt></p><a id="more"></a><h1 id="判断有向图边的类型"><a href="#判断有向图边的类型" class="headerlink" title="判断有向图边的类型"></a>判断有向图边的类型</h1><p>在DFS的过程中，可以直接用pre, post 值来判断；当然首先得知道如何计算 pre, post 值，这同样可以用一张图来解释（该图数对为 pre,post）：</p><p><img src="2.png" alt></p><ul><li>如果一个点pre和post值不存在，说明该点未被访问过，是一个 <strong>树边</strong> （例如图中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 如果 ```pre(u) &lt; pre(v) &lt; post(v) &lt; post(u)```，说明 u 肯定 v 的祖先</span><br><span class="line">    - 若有 v-&gt;u， 则该边是一个 **回边**；（例如图中```F-&gt;B```)</span><br><span class="line">    - 若有 u-&gt;v, 且显然此时pre(v)和post(v)都存在，不可能是树边，则该边是 **前向边** （例如图中```E-&gt;G```)</span><br><span class="line">- 对于 **横跨边**，已经是分属两条不同的深搜路径，所以必然的，两个点的(pre,post)区间没有重叠（例如图中 ```D-&gt;H</span><br></pre></td></tr></table></figure></li></ul><p>可以总结为下图：</p><p><img src="3.png" alt></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="判断有向图是否有圈"><a href="#判断有向图是否有圈" class="headerlink" title="判断有向图是否有圈"></a>判断有向图是否有圈</h2><p>等价于判断图中是否有 <strong>回边</strong></p><h2 id="进行拓扑排序"><a href="#进行拓扑排序" class="headerlink" title="进行拓扑排序"></a>进行拓扑排序</h2><p>首先要知道什么是拓扑排序：拓扑排序就是将结点依次排序，使得图内的边都是从该序列前面的点流向后面的点（显然前提是这个图不能有环）</p><p>例：穿衣服问题，见下图。</p><p><img src="4.png" alt></p><p><strong>正如图中所示，只要按Post值倒序就可以了</strong></p><blockquote><p>当然这题还有另外的解法：不断从图中删去in-degree为0的点（source）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强连通分量</title>
      <link href="/2018/11/26/Algorithm/graph-scc/"/>
      <url>/2018/11/26/Algorithm/graph-scc/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Definition: A strongly connected component (SCC) of a directed graph G = (V, E) is a maximal set of vertices C ⊆ V such that every pair of vertices u and v in C are reachable from each other.</p><p>翻译过来就是，把一个有向图划分成<strong>尽可能大</strong>的几个集合，集合内的结点两两互相都可达，这样的每一个“集合”就是一个<strong>强连通分量</strong></p><a id="more"></a><h2 id="求解过程分析"><a href="#求解过程分析" class="headerlink" title="求解过程分析"></a>求解过程分析</h2><blockquote><p>求解一个有向图的强连通分量的算法不是一蹴而就的，下面就叙述一下这个算法逐步形成的过程</p></blockquote><ul><li>将强连通分量都“缩圈”缩成一个点，得到的图是<strong>DAG</strong>（有向无环图） —— 任何一个有向图都是其 强连通分量 组成的DAG</li></ul><p><img src="5.png" alt></p><ul><li><p>一个DAG，一定会有Sink（入度为0的点）和Source（出度为0的点）</p></li><li><p>如果能从Sink联通量里面任意一个点开始DFS，就可以求出这个Sink联通量，因为它<strong>跑不出去</strong>。</p></li><li><p>然后删去这个联通量，DFS树仍有叶子——就是仍有Sink，<strong>重复上述操作</strong></p></li></ul><p>可是问题就在于：并无法找到Sink联通量里的一个点。那该怎么办呢？</p><ul><li>虽然没法找到Sink联通量，但我们可以找得到<strong>Source</strong>：在完整DFS过程以后，Post值最大的就一定在Source联通量内：<ul><li>假设从Source内的点开始DFS，显然Post最大的就在Source内（Root）</li><li>假设不从Source内的点开始DFS，Source是到不了的；后面必然又要从Source内的点再次DFS，导致Post值最大</li></ul></li></ul><p>但找到Source也没有用啊，从Source内的一点开始DFS，肯定会<strong>跑出去</strong>，那有什么用呢？</p><ul><li><strong>把边反向，Source就变成了Sink</strong>，而且联通的性质是不变的——强联通量还是那些强联通量</li></ul><p><img src="6.png" alt></p><ul><li>这样就可以从Post最大的值开始DFS，找出第一个强联通量，并且从图中删去</li><li>更棒的是，删去第一个强联通量以后，<strong>现在Post最大的就是删后图的Sink值</strong>，这样就可以不断重复前面的步骤</li></ul><h2 id="求解步骤总结"><a href="#求解步骤总结" class="headerlink" title="求解步骤总结"></a>求解步骤总结</h2><blockquote><p>如果完整地看完了上面，下面的求解步骤可以直接忽略的啦</p></blockquote><ol><li>进行DFS，求出每个结点的Post值，存入优先队列</li><li>将有向图边反向 $G {\rightarrow} G^T$</li><li>从Post值最高的点开始DFS，并将DFS所得的点存入一个集合，形成一个强连通分量；同时将这些点从图中删去</li><li>重复第三步，直到所有联通量都形成</li></ol><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>第一次DFS求Post值并放入优先队列：<br><br>$O(V+E) + O(log_2V) = O(V+E)$</li><li>将有向图边反向：<br><br>$O(V+E)$</li><li>求强联通量的过程，实际上加起来就是一次完整的DFS而已：<br><br>$O(V+E)$</li></ul><h3 id="总复杂度"><a href="#总复杂度" class="headerlink" title="总复杂度"></a>总复杂度</h3><p>$O(V+E)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试经历-字节跳动后台开发(基础架构)实习岗</title>
      <link href="/2018/11/26/Interview-ByteDance/"/>
      <url>/2018/11/26/Interview-ByteDance/</url>
      
        <content type="html"><![CDATA[<p>昨天下午尝试了第一次视频面试，面试的岗位是字节跳动的[后台开发-基础架构]实习岗，由于我本身的技术的确是远远没有达到岗位的要求，所以这一次的面试也只是抱着试一试的态度，了解一下面试的流程，积累一些经验，同时通过面试进一步了解自己应该努力的方向。</p><a id="more"></a><p>时间定在了周日下午的四点，直到面试前都没有加上HR的微信，所以在面试前心中还是有种“我要被鸽了”的感觉。点开通知邮件发给我的面试链接以后，点开展示的就是牛客网的面试系统界面:</p><p><img src="interface.png" alt></p><p>四点过了两分钟，面试官就上线了，是个很有亲和力的中年男子。此时我还是很紧张的，毕竟是第一次参加正经的面试，所以谈吐都有些不自然了。调整视频连接耽误了一小段时间。</p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>面试官看了看我的简历，上面有一项是“熟悉Go语言编程”；我听到他提起这个心里就凉了一半：其实自己对于Go语言也借由本学期的服务计算课进行了个入门而已，远算不上熟悉。然后他说有一道题特别适合用Go来编程，就出给我做了:</p><hr><p>先定义了一个<code>read</code>函数，这个函数就是一个Socket接口，每次会读数据入缓冲区；然后要我写一个<code>readLine</code>函数，按行输出Socket读的数据，他一开始先给了我两个提示：</p><ul><li><code>read</code>是会阻塞的</li><li>每次<code>read</code>得到的数据有可能有换行符<code>\n</code>，有可能没有，也有可能会有多个</li></ul><p>这是面试官给出的函数定义:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read: socket api </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - fd: socket 的文件fd</span></span><br><span class="line"><span class="comment">// - buf: 读入缓冲区</span></span><br><span class="line"><span class="comment">// - N: 最大数据大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(fd <span class="keyword">int</span>,  buf []<span class="keyword">byte</span>, N <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>听完题后我整个人就很慌了，因为心里总有股声音觉得自己不会。而实际上我也的确对Go不熟悉，很多类似<code>append</code>, <code>channel</code> 这样的操作还需要查自己或别人的博客去写。</p><p>虽然慌的一匹，但总归还是有一点思路（现在想来这也不过就是一道生产者、消费者的问题），中间面试官提示我用<code>channel</code>去做这一道题，但我并没有用过所以短暂思考后也放弃了这个思路。</p><p>最后用一个循环调用<code>read</code>的方法完成了这道题，用<code>last</code>变量来存储上一次调用<code>read</code>所剩下的内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Read <span class="keyword">struct</span> &#123;</span><br><span class="line">fd <span class="keyword">int</span>          <span class="comment">// socket fd</span></span><br><span class="line">N  <span class="keyword">int</span>          <span class="comment">// max size per line</span></span><br><span class="line">last []<span class="keyword">byte</span>     <span class="comment">// last read remained</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Read)</span> <span class="title">readLine</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">for</span> read(r.fd, buf, r.N) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; buf.size(); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> buf[i] == <span class="string">'\n'</span> &#123;</span><br><span class="line">temp := <span class="built_in">append</span>(last, buf[:i]...)</span><br><span class="line">r.last = buf[i+<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这中间有几个严重的逻辑错误，都是面试官提出来然后我才能反应过来并迅速修正：</p><ul><li><p>如果某次<code>read</code>得到了多行，那么<code>last</code>存储的数据就会是多行的，代码没有考虑这个问题。解决方案我也立马能想出来：在执行循环调用<code>read</code>之前先检查<code>last</code>是否为空，不为空就遍历一遍看看是否有一行存在，有则返回第一行并对<code>last</code>进行切割</p></li><li><p>如果某次<code>read</code>没有换行，这份代码并没有将这次读取的数据保存。显然解决方案就是在每次循环的末尾增加一个<code>append(last, buf...)</code></p></li></ul><p>这也体现出我的思维是很不严谨的，然后代码能力也偏弱。我在以往做算法题的时候就很依赖提交，通过提交去检查自己的代码有没有问题，这样在考试的时候就会体现出我这样效率其实很低，而且长期的依赖也导致了自己基本的Debug能力有所降低。</p><p>在编程测试结束的时候，面试官告诉我简历不能给面试带来信息不对称，比如刚入门Go语言就不应该写成熟悉；也真是令人汗颜。自己的简历的确有着不少的水分，需要重新修改一番。</p><h2 id="后阶段面试"><a href="#后阶段面试" class="headerlink" title="后阶段面试"></a>后阶段面试</h2><p>后阶段面试就更加能显现我简历的水分了，面试官看到我在简历里写了我在做MIT的6.828的实验，他想要从这里展开。到这里我就不得不和盘托出其实我只做了这个系列实验的Lab1，然后考虑到学这个又要去学x86编程，耗费时间有点多然后就搁置了。听到这里其实面试官已经基本宣告面试fail了。他告诉我这个部门是负责存储的，所以对算法或者某一后台领域的知识会要求很高，所以希望我可以明确一个方向，回去好好修炼再去考虑面试的事情。他还推荐我可以去看CMU的存储课程。另外，他还说我可以考虑面试一下后台业务开发的岗位，链接在面试通知邮件里也可以找到。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次面试也就这样在不安中结束了。的确这次就是抱着来试试的态度进行面试，所以结果不如意倒也正常。面试时间虽然只有短短的一个多小时，但也还是了解到了自己很多的缺陷：代码能力亟待提高，需要专精一个后台的方向（目前我想做的是网络编程），另外基础课程的知识也非常重要，如果有时间得捡回6.828，再加一些存储的课程。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox安装 WinXP+CentOS双系统</title>
      <link href="/2018/11/24/Linux/VitualBox-Double-System/"/>
      <url>/2018/11/24/Linux/VitualBox-Double-System/</url>
      
        <content type="html"><![CDATA[<p>建议在开始之前，先在<a href="http://linux.vbird.org/linux_basic/0130designlinux.php" target="_blank" rel="noopener">这里</a>学习分区和开机的知识，然后按照<a href="http://linux.vbird.org/linux_basic/0157installcentos7.php" target="_blank" rel="noopener">这个</a>步骤把CentOS单系统安装成功之后，再来看这里。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#multiboot" target="_blank" rel="noopener">鸟哥Linux私房菜 - 多重开机安装流程与管理</a></li><li><a href="http://www.jinbuguo.com/linux/grub.cfg.html" target="_blank" rel="noopener">Grub2配置文件详解</a></li></ul><a id="more"></a><h1 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go"></a>Let’s Go</h1><p>采用的是先装 CentOS, 再安装Windows的过程，体验一下 “救援” 被Windows覆盖的MBR的过程</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>XP ISO 安装版，有些版本是所谓 装机版 是不能在Virtual Box跑的，它需要在Windows下打开来运行；我们需要的是ISO映像 <a href="http://www.2013xp.com/xp/3057.html" target="_blank" rel="noopener">这个</a>就可以</p><p>CentOS-7 minimal, 官网下载即可</p><h2 id="新建虚拟硬盘"><a href="#新建虚拟硬盘" class="headerlink" title="新建虚拟硬盘"></a>新建虚拟硬盘</h2><blockquote><p>这一步很关键</p></blockquote><p>由于XP系统只能识别IDE硬盘，因此在新建系统时如果选择Ubuntu，Win10之类的都会自动分配一个SATA硬盘，这会导致WindowsXP无法识别，从而安装失败。</p><p>选择Linux-&gt;其他Linux系统则会分配IDE接口的硬盘。另外，直接选择XP系统会导致CentOS中途无法安装，原因暂时不明</p><blockquote><p>还需继续研究</p></blockquote><h2 id="使用CentOS分区并安装CentOS"><a href="#使用CentOS分区并安装CentOS" class="headerlink" title="使用CentOS分区并安装CentOS"></a>使用CentOS分区并安装CentOS</h2><p>当然WindowsXP也能进行分区，只不过界面和功能来说还是CentOS更胜一筹；详细的步骤跟着 <a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#multiboot_design" target="_blank" rel="noopener">鸟哥的教程</a>就行了。当然博主的分区规划和鸟哥的略有不同，如下所示：</p><ul><li>1M ~ 15G : 主要分区1，用于安装CentOS (<code>sda1</code>)</li><li>15G ~ 30G : 主要分区2，用于安装WindowsXP (<code>sda2</code>)</li><li>30G ~ 40G : 扩展分区 (<code>sda3</code>)<ul><li>30G ~ 38G ：逻辑分区1，用于windows和cent共享数据 (<code>sda5</code>) <blockquote><p>注意到这里从5开始，因为如前所述1~4分给了primary和extended</p></blockquote></li><li>38G ~ 40G : 逻辑分区2，用于换页，增强内存功能 (<code>sda6</code>)</li></ul></li></ul><h2 id="安装WindowsXP"><a href="#安装WindowsXP" class="headerlink" title="安装WindowsXP"></a>安装WindowsXP</h2><p>重新设置一下启动的ISO镜像，选择WindowsXP镜像启动，然后安装，注意别安装错了（当然如果不小心点了CentOS的系统盘会有提示上面装了系统）</p><p>安装完以后，虚拟硬盘的MBR就被WindowsXP的boot loader “霸道”地覆盖了，重启就只能进入WindowsXP系统</p><h2 id="救援MBR内的Boot-Loader"><a href="#救援MBR内的Boot-Loader" class="headerlink" title="救援MBR内的Boot Loader"></a>救援MBR内的Boot Loader</h2><p>此时我们需要替换MBR的boot loader，不能再让XP占用下去了！网上很多建议装双系统是先装Windows再装Linux，是因为很多Linux版本自带了一个强大的 boot loader - grub2, 它可以实现多重引导（其实本质上就是引导到某个分区的booting section上而已）</p><p>现在在MBR被覆盖的情况下，我们仍然能通过CentOS的安装程序进行“救援”：关机，切换CentOS的ISO镜像，然后按照<a href="http://linux.vbird.org/linux_basic/0157installcentos7.php#multiboot_rescue" target="_blank" rel="noopener">鸟哥的教程</a>进行救援</p><h2 id="Grub2设置"><a href="#Grub2设置" class="headerlink" title="Grub2设置"></a>Grub2设置</h2><p>鸟哥的教程里有一部分对Grub2的设置，乍一看还是蛮困扰的，幸亏看了这一片<a href="http://www.jinbuguo.com/linux/grub.cfg.html" target="_blank" rel="noopener">教程</a>，我知道了<code>set root=&#39;(hd0,3)&#39;</code>指的是第一块硬盘内的第三个主要分区；而博主的分区规划是把Windows安装在第二个主要分区，因此改成<code>set root=&#39;(hd0,2)</code>即可，<strong>注意这里格式严格不能有多余空格哦！</strong></p><h2 id="成功！"><a href="#成功！" class="headerlink" title="成功！"></a>成功！</h2><p>然后重启，就会发现 Grub2 多了一个WindowsXP，截图留念：</p><p><img src="dsys_grub2.jpg" alt></p><p>当然Windows也启动成功了：</p><p><img src="dsys_xp.jpg" alt></p><hr><p>如有任何问题，可发邮件至 <a href="mailto:``zys980808@126.com" target="_blank" rel="noopener">``zys980808@126.com</a><code></code> 告知我，感激不尽！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Learning</title>
      <link href="/2018/11/24/Go-Learning/"/>
      <url>/2018/11/24/Go-Learning/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#helloworld">HelloWorld</a></li><li><a href="#%E5%9F%BA%E7%A1%80">基础</a><ul><li><a href="#%E5%8C%85">包</a></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a></li><li><a href="#%E5%8F%98%E9%87%8F">变量</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">控制语句</a></li><li><a href="#%E6%8C%87%E9%92%88">指针</a></li><li><a href="#%E7%BB%93%E6%9E%84%E4%BD%93">结构体</a></li><li><a href="#%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87">数组和切片</a></li><li><a href="#%E6%98%A0%E5%B0%84">映射</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%80%BC">函数值</a></li><li><a href="#%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85">函数闭包</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3">方法和接口</a><ul><li><a href="#%E6%96%B9%E6%B3%95">方法</a></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li></ul></li></ul><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Every Go program is made up of packages.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Programs start running in package main.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>按照约定，包名与导入路径的最后一个元素一致。例如：”math/rand”下的包源码均以 <figure class="highlight plain"><figcaption><span>rand``` 语句开始</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 导入一个包</span><br><span class="line">```Go</span><br><span class="line">import &quot;fmt&quot;</span><br></pre></td></tr></table></figure></p><ul><li>导入多个包<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br></pre></td></tr></table></figure></li></ul><p>包中大写为“导出”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(math.pi) <span class="comment">//报错</span></span><br><span class="line">fmt.Println(math.Pi) <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>简单的例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- variable type: after name</span></span><br><span class="line"><span class="comment">- return value type : after parameters</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相同类型形参可省略一个,例如上面<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">int</span>, y <span class="keyword">int</span></span><br></pre></td></tr></table></figure></p><p>可写作<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y <span class="keyword">int</span></span><br></pre></td></tr></table></figure></p><p>返回值可为多个<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment">//简洁赋值，等价于var a, b string = swap(...)</span></span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命名返回值，直接返回这些命名；长函数会影响可读性<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>又是一个例子<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果：</span></span><br><span class="line"><span class="comment">0 false false false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">看来是有默认初始化的过程</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>基本类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>    <span class="comment">//1 byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其中，int, uint 和 uintptr（尚未知道用处）在32位系统上为32位(4bytes)宽，64-&gt;64。需要整数时尽量使用int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></span><br><span class="line">     <span class="comment">// represents a Unicode code point</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"><span class="comment">//注意这里没有单纯的float了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><p>多个变量同时赋值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span> <span class="comment">//省略类型，自动从值获取</span></span><br></pre></td></tr></table></figure></p><p>简洁赋值语句；不能在函数外使用（函数外每个语句必须以关键字开始，如var, func）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k := <span class="number">3</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> k = <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>语法块变量声明<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="keyword">bool</span>       = <span class="literal">true</span></span><br><span class="line">MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>默认初始化值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">    fmt.Printf(<span class="string">"%v %v %v %q\n"</span>, i, f, b, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">0 0 false ""</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>类型转换：和C++类似，但不存在隐式转换<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>PP</span><br><span class="line">f := <span class="keyword">float64</span>(i)</span><br><span class="line">u := <span class="keyword">uint</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面会报错</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = i</span><br></pre></td></tr></table></figure></p><p>常量const关键字，不能用:=赋值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> World = <span class="string">"世界"</span></span><br></pre></td></tr></table></figure></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>Go中循环结构只有 for; for无小括号，但一定要有大括号<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br></pre></td></tr></table></figure></p><p>for内三个语句都是optional（可作while语句）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ;sum&lt;<span class="number">1000</span>;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> sum&lt;<span class="number">1000</span> &#123;&#125; <span class="comment">//分号再去掉，形如while</span></span><br><span class="line"><span class="keyword">for</span> &#123;&#125;  <span class="comment">//无限循环</span></span><br></pre></td></tr></table></figure></p><p>条件语句，也是无需小括号，必须大括号<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>if条件判断前可执行一个简单语句, 该语句声明的变量仅在if内<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>练习 - 利用牛顿法实现平方根函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">    z := <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">for</span> math.Abs(z*z - x) &gt; <span class="number">1e-15</span>&#123;</span><br><span class="line">        z -= (z*z - x) / (<span class="number">2</span>*z)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">    fmt.Println(math.Sqrt(<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句</p><ul><li>不需要break，只会运行选中的case</li><li>可通过在结尾加 fallthrough 语句延续分支</li><li>case无需为常量，取值不必为整数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fmt.Print(<span class="string">"Go runs on "</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"OS X."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Linux."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// freebsd, openbsd,</span></span><br><span class="line">    <span class="comment">// plan9, windows...</span></span><br><span class="line">    fmt.Printf(<span class="string">"%s."</span>, os)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 可以不带条件（等价于switch(true))，可当做if then else结构，更加清晰<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Good morning!"</span>)</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Good afternoon."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Good evening."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>defer，在外层函数返回后执行，其实参会立即求值（压入栈中）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"counting"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果：</span></span><br><span class="line"><span class="comment">    counting</span></span><br><span class="line"><span class="comment">    done</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针零值为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```Go</span><br><span class="line">var p *int</span><br></pre></td></tr></table></figure></p><p>&amp; * 操作和 C比较类似，但没有指针运算<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&amp;操作</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span> = &amp;i</span><br><span class="line"><span class="comment">//*操作</span></span><br><span class="line">fmt.Println(*p)</span><br><span class="line">*p = <span class="number">21</span></span><br></pre></td></tr></table></figure></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>简单例子<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X <span class="keyword">int</span></span><br><span class="line">Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</span><br><span class="line">    <span class="comment">//注意其赋值使用大括号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过名字赋值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;   <span class="comment">//v2.Y = 0</span></span><br></pre></td></tr></table></figure></p><p>点号访问成员<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">v.X = <span class="number">4</span></span><br><span class="line">fmt.Println(v.X)</span><br></pre></td></tr></table></figure></p><p>指针访问结构体，<figure class="highlight plain"><figcaption><span>等价于 ```p.X```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```Go</span><br><span class="line">v := Vertex&#123;1, 2&#125;</span><br><span class="line">p := &amp;v</span><br><span class="line">(*p).X = 1e9</span><br><span class="line">p.X = 1e9</span><br><span class="line">fmt.Println(v)</span><br></pre></td></tr></table></figure></p><h2 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h2><p>数组例子，大小需为常数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">"Hello"</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"World"</span></span><br><span class="line">fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>])</span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line">primes := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">fmt.Println(primes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切片很常用</p><ul><li>左闭右开</li><li>就像数组的局部引用，本身不存数据</li><li>上下界可忽略（下界默认0，上界默认数组/切片长度）<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">primes := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">    [3, 5, 7]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>值得注意的是，这是一个数组：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></p><p>而这创建了同样的数组，再构建了它的切片<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]<span class="keyword">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></p><p>结构体和切片结合的例子<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">struct</span> &#123;</span><br><span class="line">i <span class="keyword">int</span></span><br><span class="line">b <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="number">2</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切片的长度：包含的元素个数<br>切片的容量：从它包含的第一个元素开始，到其底层数组末尾的个数（倒是暂时不懂有什么用）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="built_in">len</span>(s)<span class="comment">//6</span></span><br><span class="line"><span class="built_in">cap</span>(s)<span class="comment">//6</span></span><br></pre></td></tr></table></figure></p><p>切片空 - nil<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line">fmt.Println(s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line"><span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"nil!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用make创建切片 - 相当于动态创建数组，初始值都为0<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)  <span class="comment">// len(a)=5</span></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></span><br></pre></td></tr></table></figure></p><p>切片中的切片以及修改的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a tic-tac-toe board.</span></span><br><span class="line">board := [][]<span class="keyword">string</span>&#123;</span><br><span class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</span><br><span class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</span><br><span class="line">[]<span class="keyword">string</span>&#123;<span class="string">"_"</span>, <span class="string">"_"</span>, <span class="string">"_"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The players take turns.</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">"X"</span></span><br><span class="line">board[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">"O"</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"X"</span></span><br><span class="line">board[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">"O"</span></span><br><span class="line">board[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">"X"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// modify the first line (by myself)</span></span><br><span class="line">board[<span class="number">0</span>] = board[<span class="number">0</span>][<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">board[<span class="number">0</span>] = board[<span class="number">0</span>][:<span class="built_in">cap</span>(board[<span class="number">0</span>])]</span><br></pre></td></tr></table></figure><p>向切片追加元素，注意：这个操作会导致底层数组被挤占，如果cap不够，会分配一个更大的数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> k = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//k: [1 2 3 4 5]</span></span><br><span class="line">m := k[:<span class="number">3</span>]</span><br><span class="line"><span class="comment">//m: [1 2 3]</span></span><br><span class="line">m = <span class="built_in">append</span>(m, <span class="number">200</span>)</span><br><span class="line"><span class="comment">//m: [1 2 3 200]; k: [1 2 3 200 5]</span></span><br><span class="line">m = <span class="built_in">append</span>(m, <span class="number">300</span>)</span><br><span class="line"><span class="comment">//m/k: [1 2 3 200 300]</span></span><br><span class="line">m = <span class="built_in">append</span>(m, <span class="number">400</span>)</span><br><span class="line"><span class="comment">//m: [1 2 3 200 300 400]; k: [1 2 3 200 300]</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> k = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//k: [1 2 3 4 5]</span></span><br><span class="line">m := k[:<span class="number">3</span>]</span><br><span class="line"><span class="comment">//m: [1 2 3]</span></span><br><span class="line">m = <span class="built_in">append</span>(m, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment">//m: [1 2 3 200 300 400]</span></span><br><span class="line"><span class="comment">//k: [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure><p>Range遍历切片<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//index + value</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有index (i)</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i) <span class="comment">// == 2**i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有value(value), index用_省略掉</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Slice 练习 —— 构造给定长度的二维数组并绘图<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/tour/pic"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="keyword">int</span>)</span> [][]<span class="title">uint8</span></span> &#123;</span><br><span class="line">result := [][]<span class="keyword">uint8</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> y := <span class="number">0</span>; y &lt; dy; y++ &#123;</span><br><span class="line">temp := []<span class="keyword">uint8</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; dx; x++&#123;</span><br><span class="line">temp = <span class="built_in">append</span>(temp,<span class="keyword">uint8</span>((x+y)/<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, temp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pic.Show(Pic)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>一个例子 —— 基本类型<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">k[<span class="string">"hello"</span>] = <span class="number">3</span></span><br><span class="line">fmt.Println(k[<span class="string">"hello"</span>])</span><br></pre></td></tr></table></figure></p><p>另一个例子 —— 结构体<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="keyword">float64</span></span><br><span class="line">Short <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</span><br><span class="line">m[<span class="string">"Bell Labs"</span>] = Vertex&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(m[<span class="string">"Bell Labs"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接初始化<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line"><span class="string">"Bell Labs"</span>: Vertex&#123;</span><br><span class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"Google"</span>: Vertex&#123;</span><br><span class="line"><span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//倒也诡异，这里的","不能省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line"><span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line"><span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对映射的修改<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在映射 m 中插入或修改元素：</span></span><br><span class="line">m[key] = elem</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取元素：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如元素不存在，则返回该元素类型的零值：</span></span><br><span class="line"><span class="comment">例如 int 返回 0, string 返回 ""</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">elem := m[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取并检测元素是否存在</span></span><br><span class="line">elem, ok := m[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">//只检测元素是否存在</span></span><br><span class="line">_, ok := m[key]</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素：</span></span><br><span class="line"><span class="built_in">delete</span>(m, key)</span><br></pre></td></tr></table></figure></p><p>自创的和if复合使用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _,ok:=m[<span class="string">"Answer"</span>];ok==<span class="literal">true</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>练习：单词检测<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"golang.org/x/tour/wc"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int</span></span> &#123;</span><br><span class="line">aMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">aArray := strings.Fields(s)</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> aArray&#123;</span><br><span class="line">aMap[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> aMap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wc.Test(WordCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为形式参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span>) <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为实际参数</span></span><br><span class="line">fmt.Println(compute(hypot))</span><br><span class="line">fmt.Println(compute(math.Pow))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><p>函数闭包指的是这样的“<strong>函数值</strong>”：该函数值代表的函数使用了函数体外（非全局）的函数；这样就使得这个函数某种意义上来说“附于”这个/这些变量（有种对象的感觉了，只不过这个对象只有一个方法）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注意这里 adder 并不是一个函数闭包，adder()才是*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum += x</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pos:= adder()</span><br><span class="line">fmt.Println(pos(<span class="number">1</span>))</span><br><span class="line">fmt.Println(pos(<span class="number">100</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：斐波那契数列<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">former := <span class="number">0</span></span><br><span class="line">latter := <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">temp := former</span><br><span class="line">temp2 := latter</span><br><span class="line">latter += former</span><br><span class="line">former = temp2</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(f())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Go 没有类。不过你可以为结构体类型定义方法。方法就是一类带特殊的 接收者 参数的函数。</p><p>打个栗子<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为非结构体声明方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"><span class="comment">//直接为float64声明方法是非法的，因为它是包外的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针接收者：值得注意的是，如果用值接收者的话，方法是无法对这个接收者——天..还是叫对象吧——方法是无法对这个对象进行修改的，而指针接收者可以。</p><p>因此显然是指针接收者更为常用（我认为，要保护数据的时候就最好不用指针）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//如果不是*Vertex而是Vertex,这里修改对原对象无效</span></span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">10</span>)</span><br><span class="line">fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用指针接收者时，实际参数无论是对象还是对象的指针，最终都会转化为指针传给函数(而单纯的函数是做不到这一点的，是否指针很严格)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">2</span>)</span><br><span class="line">p := &amp;Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">p.Scale(<span class="number">2</span>)</span><br><span class="line">fmt.Println(v, p)</span><br><span class="line"><span class="comment">//可以看到由于指针的重定向，两个方式调用方法起到了同样的效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，在方法声明里这样<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>实参也是既可以是指针也可以是值，当然其区别就在于这种声明无法修改对象的值；</p><p><strong>总而言之，方法是否能修改对象，要看函数声明的形参，和实参没有关系</strong></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口类型的变量可以保存任何实现了这些方法的值</p><p>一个例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">Abs() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Abser</span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">a = f  <span class="comment">// a MyFloat 实现了 Abser</span></span><br><span class="line">a = &amp;v <span class="comment">// a *Vertex 实现了 Abser</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面一行，v 是一个 Vertex（而不是 *Vertex）</span></span><br><span class="line"><span class="comment">// 所以没有实现 Abser。</span></span><br><span class="line"><span class="comment">//a = v</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未赋值的接口值其对象值和类型都为```&lt;nil&gt;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">S <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i I</span><br><span class="line"></span><br><span class="line">i = T&#123;<span class="string">"Hello"</span>&#125;</span><br><span class="line">describe(i)</span><br><span class="line">i.M()</span><br><span class="line">fmt.Printf(<span class="string">"(%v, %T)\n"</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：(&#123;Hello&#125;, main.T)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果将某个类型的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```Go</span><br><span class="line">var t *T</span><br><span class="line">i = t</span><br><span class="line">fmt.Printf(&quot;(%v, %T)\n&quot;, i, i)</span><br><span class="line">i.M()</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">输出(&lt;nil&gt;, *main.T), 但M方法仍然会被调用</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>对<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Go</span><br><span class="line">var i I</span><br><span class="line">i.M() //报错</span><br></pre></td></tr></table></figure></p><p>空接口的妙用：可以保存任意类型的值！（怎么有种Javascript的感觉了）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">i = <span class="number">42</span></span><br><span class="line">i = <span class="string">"hello"</span></span><br></pre></td></tr></table></figure></p><p>类型断言：判断接口是不是某个类型，并且赋值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">"hello"</span><span class="comment">//string 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 若 i 保存了一个 T，那么 t 将会是其底层值，而 ok 为 true */</span></span><br><span class="line">s, ok := i.(<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(s, ok)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 若 i 保存的不是一个 T，ok 将为 false 而 t 将为 T 类型的零值 */</span></span><br><span class="line">f, ok := i.(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Println(f, ok)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不是T，又没有OK =&gt; panic */</span></span><br><span class="line">f = i.(<span class="keyword">float64</span>) </span><br><span class="line">fmt.Println(f)</span><br></pre></td></tr></table></figure></p><p>接口类型选择(switch)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">"Twice %v is %v\n"</span>, v, v*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">"%q is %v bytes long\n"</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"I don't know about type %T!\n"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Stringer</strong>类型，在<figure class="highlight plain"><figcaption><span>```String()```方法改变输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Go</span><br><span class="line">type Person struct &#123;</span><br><span class="line">Name string</span><br><span class="line">Age  int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p Person) String() string &#123;</span><br><span class="line">return fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">a := Person&#123;&quot;Arthur Dent&quot;, 42&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">当前输出： Arthur Dent (42 years)</span><br><span class="line">如果不实现String()方法：&#123;Arthur Dent 42&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>练习：输出IP地址。用到了fmt.Sprintf<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add a "String() string" method to IPAddr</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i IPAddr)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line">result = fmt.Sprintf(<span class="string">"%v.%v.%v.%v"</span>,i[<span class="number">0</span>],i[<span class="number">1</span>],i[<span class="number">2</span>],i[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hosts := <span class="keyword">map</span>[<span class="keyword">string</span>]IPAddr&#123;</span><br><span class="line"><span class="string">"loopback"</span>:  &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line"><span class="string">"googleDNS"</span>: &#123;<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v: %v\n"</span>, name, ip)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
